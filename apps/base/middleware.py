from django.contrib.auth.middleware import AuthenticationMiddleware
import threading

# Create a thread-local storage to store the current request object.
request_local = threading.local()


class RequestTrackerMiddleware(AuthenticationMiddleware):

    def __init__(self, get_response):
        """
        Initialize the middleware.

        Args:
            get_response (callable): The next middleware or view function in the chain.
        """
        self.get_response = get_response

    def __call__(self, request):
        """
        Process the incoming request and store the request object in thread-local storage.

        Args:
            request (HttpRequest): The incoming request.

        Returns:
            HttpResponse: The response generated by the next middleware or view function.
        """
        # Store the current request in thread-local storage for access in the same thread.
        request_local.current_request = request

        # Continue processing the request and response in the middleware chain.
        response = self.get_response(request)

        return response
